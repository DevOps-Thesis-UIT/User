include:
  - project: 'devops_project3453439/sonarqube'
    ref: master
    file: '/dependency-check.yml'
image: 
    name: sonarsource/sonar-scanner-cli:10.0
    entrypoint: [""]

variables:
  REGION: ap-southeast-1
  REGISTRY: 982534381318.dkr.ecr.ap-southeast-1.amazonaws.com/group18/devops_project
  SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar' # Defines the location of the analysis task cache
  GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
  SONAR_CONFIG_BRANCH: 'javascript/typescript'
  TRIVY_CACHE_DIR: "/cache/trivy"  # Cache directory for faster scans

stages:
  - prepare
  - generate-report
  - sonarqube-check
  - pre-scan-trivy
  - build
  - post-scan-trivy

get-sonarqube-config:
  image: alpine:latest
  stage: prepare
  before_script:
    - apk add --no-cache git
  script:
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/devops_project3453439/sonarqube.git sonarqube
  only:
    refs:
      - main
  artifacts:
    paths:
      - sonarqube/
  tags:
    - build-prod

dependency-check:
  extends:
    - .owasp-dependency-check
  stage: generate-report
  before_script:
    - rm package-lock.json
    - yarn install
  only:
    refs:
      - main
  tags:
    - build-prod

generate-report:
  image: node:18
  stage: generate-report
  dependencies:
    - get-sonarqube-config
  artifacts:
    paths:
      - custom-report.json
    expire_in: 1 day
  script:
    - cp sonarqube/* ./
    - npm install || yarn install
    - >-
      npm install --save-dev eslint-plugin-sonarjs || 
      yarn add --dev eslint-plugin-sonarjs
    - >-
      npm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin || 
      yarn add --dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin
    - npx eslint . --format json --output-file custom-report.json -f ./sonarqube_formatter.mjs || true
    - cat custom-report.json
  allow_failure: true
  only:
    refs:
      - main
  tags:
    - build-prod

sonarqube-check:
  image:
    name: sonarsource/sonar-scanner-cli:10.0
    entrypoint: ['']
  stage: sonarqube-check
  cache:
    policy: pull
    key: '${CI_COMMIT_SHORT_SHA}'
    paths:
      - sonar-scanner/
  dependencies:
    - generate-report
    - dependency-check
  script:
    - >-
      sonar-scanner -X $SONAR_SCANNER_OPTS 
      -Dsonar.host.url="$SONAR_HOST_URL"
      -Dsonar.token="$SONAR_TOKEN"
      -Dsonar.projectKey="${CI_PROJECT_NAMESPACE}-${CI_PROJECT_NAME}-${CI_PROJECT_ID}-${CI_COMMIT_BRANCH}"
      -Dsonar.projectName="$CI_PROJECT_NAME"
      -Dsonar.projectVersion="${CI_COMMIT_TAG}-${CI_COMMIT_SHORT_SHA}" 
      -Dsonar.externalIssuesReportPaths=custom-report.json
      -Dsonar.qualitygate.wait=true 
      -Dsonar.qualitygate.timeout=300
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
  tags:
    - build-prod

pre-scan-trivy:
  stage: pre-scan-trivy
  image:
    name: aquasec/trivy:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
    - echo "Scanning source code for vulnerabilities..."
    - trivy fs --exit-code 1 --severity HIGH,CRITICAL --ignore-unfixed .
  tags:
    - build-prod
  only:
    refs:
      - main
  allow_failure: true

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_98
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_98
  script:
    - export ts=`date +%s`
    - export IMAGE_TAG="${CI_PROJECT_NAME}-${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}-$ts"
    - export FULL_IMAGE_NAME="${REGISTRY}:${IMAGE_TAG}"
    - echo $FULL_IMAGE_NAME > .image_name
    - >
      executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "Dockerfile"
      --destination "${REGISTRY}:${CI_PROJECT_NAME}-${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}-$ts"
      --cache=true
      --cache-ttl=48h
  tags:
    - build-prod
  only:
    refs:
      - main
  needs:
    - job: sonarqube-check
    - job: pre-scan-trivy
  artifacts:
    paths:
      - .image_name
    when: on_success

post-scan-trivy:
  stage: post-scan-trivy
  image:
    name: aquasec/trivy:latest
    entrypoint: ["/bin/sh", "-c"]
  before_script:
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_98
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_98
  script:
    - export FULL_IMAGE_NAME=$(cat .image_name)
    - echo $FULL_IMAGE_NAME
    - echo "Scanning built Docker image for vulnerabilities..."
    - trivy image --exit-code 1 --severity HIGH,CRITICAL $FULL_IMAGE_NAME
  tags:
    - build-prod
  dependencies:
    - build
  allow_failure: true
  only:
    refs:
      - main